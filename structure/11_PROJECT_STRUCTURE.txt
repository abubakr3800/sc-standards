================================================================================
PROJECT STRUCTURE - Complete Directory and File Organization
================================================================================

PURPOSE: Complete overview of project structure, directories, and files
ROOT DIRECTORY: E:\AI_projects\standards

================================================================================
ROOT LEVEL FILES
================================================================================

CORE FILES:
├── main.py                           # Main entry point (250 lines)
├── requirements.txt                  # Dependencies (42 lines)
├── README.md                         # Project documentation
├── setup.cfg                         # Setup configuration (127 lines)
├── pyproject.toml                    # Project configuration
├── Dockerfile                        # Docker configuration
├── docker-compose.yml                # Docker Compose
├── Makefile                          # Build commands (159 lines)
├── LICENSE                           # License file (23 lines)
└── .gitignore                        # Git ignore rules

CONFIGURATION FILES:
├── configs/
│   └── env_template                  # Environment template (59 lines)

DOCUMENTATION FILES:
├── docs/
│   ├── README.md                     # Main documentation
│   ├── PROJECT_STRUCTURE.md          # Project structure
│   ├── SYSTEM_OVERVIEW.md            # System overview
│   ├── WORKFLOW_EXPLANATION.md       # Workflow explanation
│   ├── ORGANIZED_STRUCTURE.md        # Organized structure
│   ├── CONFIRMATION.md               # Confirmation
│   ├── FINAL_ORGANIZATION.md         # Final organization
│   ├── GITHUB_SETUP_COMPLETE.md      # GitHub setup
│   └── SETUP_COMPLETE.md             # Setup completion

GUIDE FILES:
├── CHAT_SYSTEM_README.md             # Chat system documentation
├── PDF_STUDY_ANALYZER_README.md      # PDF analyzer documentation
├── ACCURACY_IMPROVEMENT_GUIDE.md     # Accuracy improvement guide
├── USAGE_GUIDE.md                    # Usage guide
└── PROJECT_ORGANIZATION.md           # Project organization guide

================================================================================
SOURCE CODE STRUCTURE (src/)
================================================================================

MAIN PACKAGE (src/ai_standards/):
├── __init__.py                       # Package initialization
├── core/                             # Core functionality
│   ├── __init__.py                   # Core package init
│   ├── config.py                     # Configuration system (85 lines)
│   ├── pdf_processor.py              # PDF processing (commented out)
│   └── simple_pdf_processor.py       # Simple PDF processor
├── models/                           # AI models
│   ├── __init__.py                   # Models package init
│   ├── ai_trainer.py                 # AI training system
│   └── comparison_model.py           # Comparison model
├── evaluators/                       # Evaluation modules
│   ├── __init__.py                   # Evaluators package init
│   └── lighting_report_evaluator.py  # Lighting evaluation
├── processors/                       # Processing modules
│   ├── __init__.py                   # Processors package init
│   └── dialux_processor.py           # Dialux processing
├── web/                              # Web interfaces
│   ├── __init__.py                   # Web package init
│   └── web_interface.py              # Web interface
├── api/                              # API modules
│   └── (empty)                       # API modules
└── utils/                            # Utility functions
    └── __init__.py                   # Utils package init

DATA DIRECTORIES (src/):
├── base/                             # Original standards PDFs
│   ├── ODLI20150723_001-UPD-en_AA-Lighting-for-BREEAM-in-offices.pdf
│   └── prEN 12464-1.pdf
├── data/                             # Processed data
│   └── vector_db/                    # Vector database
│       └── chroma.sqlite3            # ChromaDB database
├── uploads/                          # Uploaded files
│   ├── ODLI20150723_001-UPD-en_AA-Lighting-for-BREEAM-in-offices_processed.json
│   └── prEN 12464-1_processed.json
├── outputs/                          # Output files
│   ├── training_results_20250923_154254.json
│   └── training_results_20250923_162506.json
├── models/                           # Trained models
│   └── (empty)                       # Model storage
└── logs/                             # Log files
    └── logs/
        └── app.log                   # Application log

================================================================================
EVALUATION TOOLS (evaluators/)
================================================================================

EVALUATION MODULES:
├── simple_lighting_evaluator.py      # Simple lighting evaluation
├── realistic_lighting_evaluator.py   # Realistic lighting evaluation
├── evaluate_lighting_report.py       # Comprehensive evaluation
├── batch_pdf_evaluator.py            # Batch PDF evaluation
├── quick_batch_evaluator.py          # Quick batch evaluation
├── quick_realistic_evaluator.py      # Quick realistic evaluation
├── demo_lighting_evaluation.py       # Demo evaluation
└── demo_simple_evaluator.py          # Demo simple evaluation

================================================================================
EXAMPLES AND TESTS
================================================================================

EXAMPLES (examples/):
├── example_usage.py                  # Example usage
├── simple_extraction_test.py         # Simple extraction test
└── table_extraction_demo.py          # Table extraction demo

TESTS (tests/):
├── __init__.py                       # Tests package init
└── test_installation.py              # Installation test

TEST FILES (root level):
├── test_system.py                    # System test
├── test_batch_analyzer.py            # Batch analyzer test
├── test_chat_api.py                  # Chat API test
├── test_dialux_processor.py          # Dialux processor test
├── simple_test.py                    # Simple test
└── accuracy_test.py                  # Accuracy test

================================================================================
UTILITY SCRIPTS
================================================================================

ORGANIZATION SCRIPTS:
├── organize_files.py                 # File organization
├── quick_organize.py                 # Quick organization
└── PROJECT_ORGANIZATION.md           # Organization guide

PROCESSING SCRIPTS:
├── process_pdfs.py                   # PDF processing
├── process_standards.py              # Standards processing
├── improve_standards_extraction.py   # Extraction improvement
├── add_more_standards_data.py        # Add standards data
├── improve_accuracy.py               # Accuracy improvement
└── run_accuracy_improvements.py      # Run improvements

DEBUG SCRIPTS:
├── debug_detailed.py                 # Detailed debugging
├── debug_processing.py               # Processing debugging
└── demo_usage.py                     # Demo usage

================================================================================
DATA DIRECTORIES (root level)
================================================================================

DATA STORAGE:
├── data/                             # Data storage
│   └── .gitkeep                      # Git keep file (4 lines)
├── base/                             # Original PDFs
├── uploads/                          # Processed files
├── outputs/                          # Output files
├── models/                           # Trained models
└── logs/                             # Log files
    └── .gitkeep                      # Git keep file (4 lines)

================================================================================
CACHE AND TEMPORARY FILES
================================================================================

PYTHON CACHE:
├── __pycache__/                      # Python cache (root)
├── src/__pycache__/                  # Source cache
├── src/ai_standards/__pycache__/     # Package cache
├── src/ai_standards/core/__pycache__/ # Core cache
├── src/ai_standards/models/__pycache__/ # Models cache
└── src/ai_standards/web/__pycache__/ # Web cache

TEMPORARY FILES:
├── -p                                # Temporary file
├── =0.14.0                           # Temporary file
├── =0.27.0                           # Temporary file
├── =1.0.0                            # Temporary file
└── process.bat                       # Batch file

================================================================================
STRUCTURE DOCUMENTATION
================================================================================

STRUCTURE FOLDER:
├── structure/                        # Structure documentation
│   ├── 01_PROJECT_OVERVIEW.txt       # Project overview
│   ├── 02_MAIN_ENTRY_POINT.txt       # Main entry point
│   ├── 03_CONFIGURATION_SYSTEM.txt   # Configuration system
│   ├── 04_PDF_PROCESSING_SYSTEM.txt  # PDF processing
│   ├── 05_AI_TRAINING_SYSTEM.txt     # AI training
│   ├── 06_COMPARISON_MODEL_SYSTEM.txt # Comparison model
│   ├── 07_EVALUATION_SYSTEMS.txt     # Evaluation systems
│   ├── 08_WEB_INTERFACES.txt         # Web interfaces
│   ├── 09_COMMAND_LINE_INTERFACE.txt # CLI interface
│   ├── 10_LIBRARIES_AND_DEPENDENCIES.txt # Dependencies
│   └── 11_PROJECT_STRUCTURE.txt      # Project structure

================================================================================
FILE SIZE ANALYSIS
================================================================================

LARGE FILES:
├── out.json                          # Batch analysis results (8132 lines)
├── data/Talaat Harb club Football court _Report.pdf (12699 lines)
├── Makefile                          # Build commands (159 lines)
├── setup.cfg                         # Setup configuration (127 lines)
├── main.py                           # Main entry point (250 lines)
└── src/ai_standards/core/config.py   # Configuration (85 lines)

MEDIUM FILES:
├── requirements.txt                  # Dependencies (42 lines)
├── LICENSE                           # License (23 lines)
├── configs/env_template              # Environment template (59 lines)
└── data/.gitkeep                     # Git keep (4 lines)

================================================================================
DIRECTORY STATISTICS
================================================================================

TOTAL DIRECTORIES: 15+
TOTAL FILES: 100+
TOTAL LINES OF CODE: 10,000+
LARGEST DIRECTORY: src/ (source code)
MOST FILES: evaluators/ (8 files)
LARGEST FILE: out.json (8132 lines)

================================================================================
ORGANIZATION STATUS
================================================================================

WELL ORGANIZED:
├── src/                              # Source code structure
├── docs/                             # Documentation
├── tests/                            # Test files
├── examples/                         # Example files
└── configs/                          # Configuration files

NEEDS ORGANIZATION:
├── Root level files                  # Many scattered files
├── Temporary files                   # Cache and temp files
├── Large output files                # Results and logs
└── Duplicate files                   # Multiple versions

================================================================================
RECOMMENDED STRUCTURE
================================================================================

IDEAL ORGANIZATION:
├── src/                              # Source code
├── tools/                            # Analysis tools
├── scripts/                          # Utility scripts
├── data/                             # All data files
│   ├── standards/                    # Original PDFs
│   ├── reports/                      # User reports
│   ├── processed/                    # Processed data
│   └── studies/                      # Analysis results
├── docs/                             # Documentation
├── tests/                            # Test files
├── examples/                         # Example files
├── configs/                          # Configuration
├── outputs/                          # Output files
├── models/                           # Trained models
└── logs/                             # Log files

================================================================================
MAINTENANCE TASKS
================================================================================

REGULAR MAINTENANCE:
1. Clean temporary files
2. Organize scattered files
3. Update documentation
4. Archive old results
5. Optimize structure

CLEANUP TASKS:
1. Remove cache files
2. Delete temporary files
3. Consolidate duplicates
4. Archive large files
5. Update .gitignore

================================================================================
