[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-standards-training"
version = "1.0.0"
description = "AI-powered system for processing, training, and comparing lighting standards from PDF documents"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AI Standards Team", email = "team@aistandards.com"},
]
keywords = ["ai", "standards", "lighting", "pdf", "comparison", "nlp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "torch>=1.13.0,<3.0.0",
    "transformers>=4.21.0",
    "sentence-transformers>=2.2.0",
    "scikit-learn>=1.1.0",
    "numpy>=1.21.0",
    "pandas>=1.5.0",
    "PyPDF2>=3.0.0",
    "pdfplumber>=0.7.0",
    "pymupdf>=1.20.0",
    "pdfminer.six>=20221105",
    "spacy>=3.4.0",
    "nltk>=3.7.0",
    "langdetect>=1.0.9",
    "googletrans==4.0.0rc1",
    "streamlit>=1.20.0",
    "fastapi>=0.95.0",
    "uvicorn>=0.20.0",
    "sqlalchemy>=1.4.0",
    "chromadb>=0.3.0",
    "faiss-cpu>=1.7.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "plotly>=5.10.0",
    "tqdm>=4.64.0",
    "python-dotenv>=0.19.0",
    "pydantic>=1.10.0",
    "loguru>=0.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
gpu = [
    "torch[cuda]>=1.13.0,<3.0.0",
    "faiss-gpu>=1.7.0",
]

[project.urls]
Homepage = "https://github.com/your-org/ai-standards-training"
Documentation = "https://ai-standards-training.readthedocs.io"
Repository = "https://github.com/your-org/ai-standards-training.git"
Issues = "https://github.com/your-org/ai-standards-training/issues"

[project.scripts]
ai-standards = "main:main"
ai-standards-process = "main:process_pdfs_from_directory"
ai-standards-train = "main:train_models_from_processed_data"
ai-standards-compare = "main:compare_standards_cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sentence_transformers.*",
    "sklearn.*",
    "pdfplumber.*",
    "fitz.*",
    "spacy.*",
    "streamlit.*",
    "fastapi.*",
    "chromadb.*",
    "faiss.*",
    "plotly.*",
    "googletrans.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "docs/*",
    "examples/*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

